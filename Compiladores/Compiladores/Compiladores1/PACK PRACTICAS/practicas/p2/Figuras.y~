/*Practica 2.5 Lenguaje para formar circulos y rectangulos*/
/*Hecho por :Armando Alan Hernandez Sanchez*/
/*Declaraciones*/
%{
	import java.lang.Math;
	import java.io.*;
	import java.util.StringTokenizer;
	import java.awt.*;
	import java.awt.event.*;
	import javax.swing.*;
%}

/*Componentes lexicos*/
%token NUMBER RECTANGULO CIRCULO MOVE COLOR NOMBRECOLOR PRINT 
/*Simbolo inicial*/
%start list

/*Reglas*/
%%
    list : /*NADA*/
         | list ';'
         | list inst ';'           { maq.code("print"); 
         				                     maq.code("STOP"); 
         				                     return 1;
         				                   }   
         ;

    inst: NUMBER  					       { ((Algo)$$.obj).inst=maq.code("constpush");
                  						       maq.code(((Algo)$1.obj).simb); 
               							       } 

        | RECTANGULO NUMBER NUMBER {  maq.code("constpush");
                				   		        maq.code(((Algo)$2.obj).simb);
                                      maq.code("constpush");   
                				   		        maq.code(((Algo)$3.obj).simb);	
                				   		        maq.code("rectangulo");
                				 		       }

    	  | CIRCULO NUMBER   			   { maq.code("constpush");
				                           	 maq.code(((Algo)$2.obj).simb); 
				                          	 maq.code("circulo");
				                           }

        | COLOR NUMBER 			       { maq.code("constpush");
                							       maq.code(((Algo)$2.obj).simb);                                    
                							       maq.code("color");
                					         }
                					       
	      | MOVE NUMBER NUMBER 	 		 { maq.code("constpush");      
	  		                             maq.code(((Algo)$2.obj).simb);
                                     maq.code("constpush");
	  		                             maq.code(((Algo)$3.obj).simb); 
	  		                             maq.code("mover");
	  		                           }                
      ;
/*Codigo*/
%%
class Algo {
	
	Simbolo simb;
	int inst;
	
	public Algo(int i){
	 	inst=i; 
	}
	public Algo(Simbolo s, int i){
		simb=s;
        inst=i;
	}
}

Tabla tabla;
Maquina maq;

StringTokenizer st;
boolean newline;
/*Anaizador sintactico*/

int yylex(){
	String s;
	int tok;
	Double d;
	Simbolo simbo;
	/*Si no hay mas elementos*/
   	if (!st.hasMoreTokens())
      if (!newline) {
         newline=true; 
		 return ';';  
      }
   else
      return 0;
   s = st.nextToken();
   try {
      d = Double.valueOf(s);
      yylval = new ParserVal(
             new Algo(tabla.install("", NUMBER, d.doubleValue()),0) );
      tok = NUMBER;
   } catch (Exception e){
   if(Character.isLetter(s.charAt(0))){
      if((simbo=tabla.lookup(s))==null)
         yylval = new ParserVal(new Algo(simbo, 0));
	 tok= simbo.tipo;	
      } else {
    	tok = s.charAt(0);
      }
   }
   return tok;
}
void yyerror(String s){
   System.out.println("parser error: "+s);
}

static Parser par = new Parser(0);
static JFrame f;
static JTextField t=new JTextField(20);
static JButton bcalc;
static JLabel lmuestra=new JLabel("");
static Canvas canv;
static Graphics g;

Parser(int foo){
   f=new JFrame("Practica 2.5 Dibuja Rectangulos y Circulos");
   bcalc=new JButton("Ejecutar");
   bcalc.setMnemonic('E');
   bcalc.addActionListener(new ManejaBoton());
   canv=new Canvas();
   canv.setSize(450,300);
   canv.setBackground(Color.white);
   f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);  
}
/*Funcion principal*/
public static void main(String args[]){
  f.add("North", t);  
  f.add("Center", canv);
  f.add("South", bcalc);
  f.setSize(500,400);
  f.setVisible(true);
  g=canv.getGraphics();
}

class ManejaBoton implements ActionListener {
   public void actionPerformed(ActionEvent e){
      JButton jb=(JButton)e.getSource();
      if(jb == bcalc){
         maq=new Maquina(g,canv);
         tabla=new Tabla();    
         tabla.install("circulo", CIRCULO, 0.0);
         tabla.install("rectangulo",RECTANGULO,0.0);
         tabla.install("mover",MOVE,0.0);
         tabla.install("color", COLOR, 0.0);
         tabla.install("print", PRINT, 0.0);
         st = new StringTokenizer(t.getText());
         newline=false;
   for(maq.initcode(); par.yyparse ()!=0; maq.initcode())
      maq.execute(maq.progbase);
      }
      t.setText("");
   }
}


//byaccj -J hoc5j.y
%{
import java.lang.Math;
import java.io.*;
import java.util.StringTokenizer;
%}
%token  NUMBER PRINT VAR BLTIN INDEF WHILE IF ELSE
%token  FUNCTION PROCEDURE RETURN FUNC PROC
%token  ARG
%right '='
%left OR
%left AND
%left GT LT EQ
%left '+' '-'
%left '*' '/'
%left UNARYMINUS NOT
%right '^'
%%
list:   
    | list'\n'  
    | list defn ';'
    | list asgn '\n'  { maq.code("pop"); 
                  maq.code("STOP"); return 1 ;}
    | list stmt '\n' { maq.code("STOP"); return 1 ;}
    | list expr '\n'   { maq.code("print"); 
                  maq.code("STOP"); return 1 ;}  
    ;
asgn:	VAR '=' expr { 
           $$=$3; maq.code("varpush"); 
                  maq.code(((Algo)$1.obj).simb); 
		  maq.code("assign");
	}
     |  ARG '=' expr
      { 
        defnonly("$");     
        //code2(argassign,(Inst)$1); 
        maq.code("argassign"); 
        maq.code($1.ival+"");
        $$=$3;
      }
     ;
stmt:     expr   { 
                  maq.code("pop");}
   | RETURN { defnonly("return"); maq.code("procret"); } 
   | RETURN expr
          { defnonly( "return" ); $$ = $2; maq.code("funcret") ; } 
   | PROCEDURE begin '(' arglist ')'
          { $$ = $2; 
            maq.code("call"); 
            maq.code(((Algo)$1.obj).simb); 
            maq.code($4.ival+"");
    } 
   | PRINT prlist  { $$ = $2; }
    | while cond stmt end {
             maq.getProg().setElementAt(
                 new Integer(((Algo)$3.obj).inst),
                 ((Algo)$1.obj).inst+1); 
             maq.getProg().setElementAt(
                 new Integer(((Algo)$4.obj).inst),
                 ((Algo)$1.obj).inst+2); 
		 }    
        | if cond stmt end {   
                 maq.getProg().setElementAt(
                 new Integer(((Algo)$3.obj).inst),
                 ((Algo)$1.obj).inst+1); 
                 maq.getProg().setElementAt(
                 new Integer(((Algo)$4.obj).inst),
                 ((Algo)$1.obj).inst+3); 
                  }  
	| if cond stmt end ELSE stmt end { 
                 maq.getProg().setElementAt(
                 new Integer(((Algo)$3.obj).inst),
                 ((Algo)$1.obj).inst+1); 
                 maq.getProg().setElementAt(
                 new Integer(((Algo)$6.obj).inst),
                 ((Algo)$1.obj).inst+2);             
                  maq.getProg().setElementAt(
                 new Integer(((Algo)$7.obj).inst),
                ((Algo)$1.obj).inst+3);  
	  } 
	|   '{'  stmtlist  '}' {  
                  $$  =  $2; 
                  }
        ;
cond: '(' expr ')'  {   maq.code("STOP");  
         ((Algo)$$.obj).inst = ((Algo)$2.obj).inst;//checar
    }
;
while:	WHILE   {   
  $$ = new ParserVal(new Algo(maq.code("whilecode"))); 
        maq.code("STOP");maq.code("STOP");
        }
	;
if:IF   { //$$ = code(ifcode); code3(STOP,STOP,STOP);
  $$ = new ParserVal(new Algo(maq.code("ifcode"))); 
        maq.code("STOP");maq.code("STOP");maq.code("STOP");
        }
	;
begin:  /* nada */          { 
        $$=new ParserVal(new Algo(maq.getProgP()));
        //$$ = new ParserVal(maq.getProgP()); 
        }
   ;
end:     { maq.code("STOP"); 
 $$=new ParserVal(new Algo(maq.getProgP()));
 //$$=new ParserVal(maq.getProgP());        
        }
	;
stmtlist: 	{   
  $$=new ParserVal(new Algo(maq.getProgP()));          
  //$$=new ParserVal(maq.getProgP());  
        }
	| stmtlist '\n' 
	| stmtlist stmt 
	;
expr:     NUMBER  { ((Algo)$$.obj).inst=maq.code("constpush");
                maq.code(((Algo)$1.obj).simb); }
        | VAR { ((Algo)$$.obj).inst=maq.code("varpush");
                maq.code(((Algo)$1.obj).simb); maq.code("eval");}
        | ARG    {   
          defnonly("$"); 
          //$$ = code2(arg, (Inst)$1);      
        //System.out.println("$1: ARG ("+$1.ival+")");
          //erroneo ((Algo)$$.obj).inst= maq.code("arg"); 
          $$ = new ParserVal(new Algo(maq.code("arg"))); 
          maq.code($1.ival+"");
          }
	| asgn
        | FUNCTION begin '(' arglist ')'
           { $$ = $2; 
             maq.code("call"); 
             maq.code(((Algo)$1.obj).simb); 
             maq.code($4.ival+"");
        } 
        | BLTIN '(' expr ')'{ $$=$3; maq.code("bltin"); maq.code(((Algo)$1.obj).simb); }
        | expr '+' expr { maq.code("add");}
        | expr '-' expr { maq.code("sub"); }
        | expr '*' expr { maq.code("mul");}
        | expr '/' expr { maq.code("div"); }
        | expr '^' expr { maq.code("power"); }	
        | '(' expr ')'  { $$= $2;}
        | '-' expr %prec UNARYMINUS { $$=$2; maq.code("negate");}
        |expr EQ expr  { maq.code("eq"); }
        |expr GT expr  { maq.code("gt"); }
	|expr LT expr  { maq.code("lt"); }
	|expr AND expr { maq.code("and"); }
	|expr OR expr  { maq.code("or"); }
	|NOT expr      { $$ = $2; maq.code("not"); }
	;
prlist: expr               {   maq.code("prexpr"); }
   |   prlist ','  expr    {   maq.code("prexpr"); }
   ;
defn:    FUNC procname { ((Algo)$2.obj).simb.tipo=FUNCTION; indef=true; }
'(' ')' stmt { maq.code("procret"); maq.define(((Algo)$2.obj).simb); indef=false; } 
   | PROC procname { ((Algo)$2.obj).simb.tipo=PROCEDURE; indef=true; }
'(' ')' stmt { maq.code("procret"); maq.define(((Algo)$2.obj).simb); indef=false; }
   ;
procname: VAR
   | FUNCTION 
   | PROCEDURE
   ;
arglist:  /* nada */   { $$ = new ParserVal(0); }
   | expr                 { $$ = new ParserVal(1); }
   | arglist ',' expr     { $$ =  new ParserVal($1.ival + 1); }
   ;
%%
class Algo {
	Simbolo simb;
	int inst;

	public Algo(int i){
		inst=i;
	}
	public Algo(Simbolo s, int i){
		simb=s;
                inst=i;
	}
}
boolean indef;
static Tabla tabla;
static Maquina maq;

static String ins;
static StringTokenizer st;

void yyerror(String s){
 System.out.println("parser:"+s);
}
void defnonly(String s){
	if(!indef)
		System.out.println(s+" usado fuera de la definicion");
}
static boolean newline;
int yylex(){
   String s;
   int tok = 0;
   Double d;
   Simbolo simbo;
   //revisar nva linea
   if (!st.hasMoreTokens())
      if (!newline){
	 newline=true;
	 return '\n'; 
      }
      else
	 return 0;	
   s = st.nextToken();
   //System.out.println("tok act: ("+s+" )");
   try{
      d = Double.valueOf(s);
      yylval = new ParserVal(
new Algo(tabla.install("", NUMBER, d.doubleValue()), 0) );
      tok = NUMBER; 
   } catch (Exception e){
      if(Character.isJavaLetter(s.charAt(0))&& s.charAt(0)!='$'){
  //System.out.println("JavaLetter(s.charAt(0): ["+s.charAt(0)+" ]");
         if((simbo=tabla.lookup(s))== null)
	    simbo=tabla.install(s, INDEF, 0.0);
         yylval = new ParserVal(new Algo(simbo, 0));
         //System.out.println("tok act tipo: ("+simbo.tipo+" )");
	 tok= (simbo.tipo == INDEF ? VAR : simbo.tipo);	
      }
      else if(s.charAt(0) == '$'){
 //System.out.println("tok act tipo: ARG < "+s.substring(1)+" >");
	yylval = new ParserVal((int)Integer.parseInt(s.substring(1)));
        //System.out.println("tok act tipo: ARG");
                //return ARG;
                    tok= ARG;
      }
       else if(s.charAt(0) == '#'){
         //System.out.println("tok act tipo: EQEQ");
                    tok= EQ;
      }
      else if(s.charAt(0) == '<'){
                    tok= LT;
      }
      else if(s.charAt(0) == '>'){
                    tok= GT;
      }
      else if(s.charAt(0) == '!'){
                    tok= NOT;
      }	
      else if(s.charAt(0) == '|'){
                    tok= OR;
      }
      else if(s.charAt(0) == '&'){
                    tok= AND;
      }			
      else{
         tok = s.charAt(0);
      }
   }
   //System.out.println("Token: " + tok);
   return tok;
}
public static void main(String s[]){
   BufferedReader in = new BufferedReader(
       new InputStreamReader(System.in));
   maq=new Maquina();
   tabla=new Tabla();
   tabla.install("sin",BLTIN, 0.0);
   tabla.install("cos",BLTIN, 0.0);
   tabla.install("tan",BLTIN, 0.0);
   tabla.install("asin",BLTIN, 0.0);
   tabla.install("acos",BLTIN, 0.0);
   tabla.install("atan",BLTIN, 0.0);
   tabla.install("exp",BLTIN, 0.0);
   tabla.install("log",BLTIN, 0.0);
   tabla.install("sqrt",BLTIN, 0.0);
   tabla.install("if", IF, 0.0);
   tabla.install("else", ELSE, 0.0);
   tabla.install("while", WHILE, 0.0);
   tabla.install("print", PRINT, 0.0);
   tabla.install("proc", PROC, 0.0);
   tabla.install("func", FUNC, 0.0);
   tabla.install("return", RETURN, 0.0);
   System.out.println("Hoc6");
   Parser par = new Parser(false);
   System.out.print("expression:");
   try{
      ins = in.readLine();
   } catch (Exception e){}
   st = new StringTokenizer(ins);
   newline=false;
   for(maq.initcode(); par.yyparse ()!=0; maq.initcode()){
      //maq.execute(maq.progbase);
      maq.execute(maq.getProgBase());
      System.out.print("expression:");
      try{
         ins = in.readLine();
      } catch (Exception e){}
      st = new StringTokenizer(ins);  
      newline=false;
   }		
}



